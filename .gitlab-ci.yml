image: docker:latest
services:
  - docker:dind

stages:
  - build
  - test
  - publish
  - deploy

variables:
  APP_PRODUCTION_IMAGE: registry.gitlab.com/unleashit/jasongallagher.org/app:$CI_COMMIT_SHA
  APP_STAGING_IMAGE: registry.gitlab.com/unleashit/jasongallagher.org/staging:$CI_COMMIT_SHA
  APP_TEST_IMAGE: registry.gitlab.com/unleashit/jasongallagher.org/dev:$CI_COMMIT_SHA
  APP_RELEASE_IMAGE: registry.gitlab.com/unleashit/jasongallagher.org/app
  APP_RELEASE_IMAGE_STAGING: registry.gitlab.com/unleashit/jasongallagher.org/staging

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

build_staging:
  stage: build
  script:
    - docker build -t $APP_STAGING_IMAGE -f Dockerfile-app .
    - docker push $APP_STAGING_IMAGE
    - docker build --target build -t $APP_TEST_IMAGE -f Dockerfile-app .
    - docker push $APP_TEST_IMAGE
  only:
    - staging

build_production:
  stage: build
  script:
    - docker build -t $APP_PRODUCTION_IMAGE -f Dockerfile-app .
    - docker push $APP_PRODUCTION_IMAGE
    - docker build --target build -t $APP_TEST_IMAGE -f Dockerfile-app .
    - docker push $APP_TEST_IMAGE
  only:
    - master

test-app:
  stage: test
  script:
    - docker pull $APP_TEST_IMAGE
    - docker run -e NODE_ENV='test' $APP_TEST_IMAGE bash -c "jest"

publish_staging:
  stage: publish
  script:
    - docker pull $APP_STAGING_IMAGE
    - docker tag $APP_STAGING_IMAGE $APP_RELEASE_IMAGE_STAGING
    - docker push $APP_RELEASE_IMAGE_STAGING
  only:
    - staging

publish_production:
  stage: publish
  script:
    - docker pull $APP_PRODUCTION_IMAGE
    - docker tag $APP_PRODUCTION_IMAGE $APP_RELEASE_IMAGE
    - docker push $APP_RELEASE_IMAGE
  only:
    - master

deploy_staging:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh -p2222 root@192.241.211.8 "cd /home/jasongallagher.org && docker login registry.gitlab.com && docker-compose -f docker-compose.yml -f docker-compose-prod.yml pull && docker-compose down && docker-compose -f docker-compose.yml -f docker-compose-prod.yml up -d && docker restart nginx-server"
  only:
    - staging

deploy_production:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - ssh -p2222 root@192.241.211.8 "cd /home/jasongallagher.org && docker login registry.gitlab.com && docker-compose -f docker-compose.yml -f docker-compose-prod.yml pull && docker-compose down && docker-compose -f docker-compose.yml -f docker-compose-prod.yml up -d && docker restart nginx-server"
  only:
    - master